<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Power 4 3D</title>
    <style>
        body {
            margin:0;
            height: 100vh;
        }

        canvas {
            display:block;
        }

        #winner {
            position: absolute;
            display:none;
            top: 70px;
            left: 10px;
            background-color:#CCAACC;
            border: black solid 1px;
            width: 97%;
            height: 75px;
            opacity: .4; 

            padding:5px;
            text-align: center;
            font-weight: bold;
            font-size: 26px;
        }
        
        #restart {
            text-align: center;
            font-weight: bold;
            font-size: 30px;

        }
        
        #restart-top {
            display:none;

            position: absolute;
            top: 60px;
            left: 10px;

            text-align: center;
            font-weight: bold;
            font-size: 12px;
        }

        #players {
            position: absolute;
            top: 10px;
            left: 10px;
            
            text-align: left;
            font-weight: bold;
            font-size: 14px;
        }
        
        .player-value {
            float: left;

        }
        
        .player-label {
            float: left;
            width: 120px;
        }

        #turn {
            position: absolute;
            top: 45px;
            left: 10px;
            
            text-align: left;
            font-weight: bold;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/public/js/three.min.js"></script>
    <script src="/public/js/OrbitControls.js"></script>
    <script src="/public/js/gsap.min.js"></script>
    <script src="/public/js/jquery-3.5.1.min.js"></script>

    <div id="players">
        <div>
            <div class="player-label">
                Player 1 (white) : 
            </div>
            <div class="player-value" id="player1"></div>
        </div>
        <div>
            <div class="player-label">
                Player 2 (black) : 
            </div>
            <div class="player-value" id="player2"></div>
        </div>
    </div>

    <div id="turn">Current turn is : player <span id="turn-value"></span></div>

    <button id="restart-top">restart</button>


    <div id="winner"><div id="infos"></div><button id="restart">restart</button><br/></div>
    

    <script>
        
        var currentFirstPlayer;
        var waitingForPlayer = true;

        var socket;
        var ishost = false;

        var playerName = "";
        var currentPlayer;

        var camera;
        var scene;
        var renderer;
        var controls;
        var boardBase;
        var lightFront;
        var raycaster;
        var mouse;
        var lineMesh = new Array();
        var selectedLine;
        var temporaryBall;
        var placedBallsInLines;
        var placedBalls = new Array();

        var boardColor = 0xFFCC00;
        var ballWhiteColor = 0xDDDDDD;
        var ballBlackColor = 0x222222;

        var baseYPosition = -40;

        var boardHeight = 3;
        var linesSize = 3.5;
        var ballSize = 12;

        var lineSpace = ballSize + 5;
        var linesHeight = ballSize * 4 + 5;
        var boardSize = lineSpace * 4;

        var tl;
        
        var turn;
        var winner;

        var backendUrl = "<%=backendUrl%>";

        var blockMoves = false;
        
        var onWindowResize = () => {
            renderer.setSize(window.innerWidth, window.innerHeight);
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            render();
        }

        var render = () => {
            renderer.render(scene, camera);
        };

        var animate = () => {
            requestAnimationFrame(animate);
            controls.update();
            render();
        };

        var processClickOrTouch = () => {
            
            if(waitingForPlayer) {
                return;
            }
            
            if(blockMoves) {
                return;
            }

            if(winner != 0) {
                return;
            }

            if(turn != currentPlayer.no) {
                return;
            }

            raycaster.setFromCamera( mouse, camera );
            var intersects = raycaster.intersectObjects(lineMesh, false);

            if(selectLine(intersects)) {
                return;
            }

            if(intersects.length > 0) {
				if (selectedLine == intersects[0].object) {
                    if(lineMesh.includes(intersects[0].object)) {

                        var ballCountInLine = placedBallsInLines[selectedLine.gameXAxis][selectedLine.gameZAxis];
                        if(ballCountInLine < 4) {

                            // Can place ball
                            if(temporaryBall) {

                                var move = {
                                        player: turn, 
                                        x: selectedLine.gameXAxis,
                                        y: ballCountInLine,
                                        z: selectedLine.gameZAxis,
                                    };

                                // Call API
                                blockMoves = true;
                                $.post(backendUrl + "/game/play", 
                                    move, 
                                    function( data ) {
                                        // place ball
                                        placeBall(move, () => {
                                            // send socket info
                                            socket.emit('playerMove', move);
                                        });
                                        
                                    }
                                )
                                .fail(function(data) {
                                    var error = "";
                                    try {
                                        error = data.responseJSON.error.message;
                                    } catch(e) { }
                                    alert("Error : " + error);
                                    blockMoves = false;
                                });


                            }
                        }
                    }
                }
            }
        }

        var onTouch = (event) => {
            mouse.x = +(event.targetTouches[0].pageX / window.innerWidth) * 2 +-1;
            mouse.y = -(event.targetTouches[0].pageY / window.innerHeight) * 2 + 1

            processClickOrTouch();
        }

        var onMouseClick = (event) => {
            event.preventDefault();

            mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
            mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
            
            processClickOrTouch();
        };

        var onMouseMove = (event) => {
            event.preventDefault();

            mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
			mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

            raycaster.setFromCamera( mouse, camera );
            var intersects = raycaster.intersectObjects(lineMesh, false);

            selectLine(intersects);
        };

        var selectLine = (intersects) => {
            
            if(turn != currentPlayer.no) {
                return;
            }

            if(blockMoves) {
                return;
            }

            if(waitingForPlayer) {
                return;
            }

            if(intersects.length > 0) {

                if (selectedLine != intersects[0].object) {
                    for(var i=0; i<lineMesh.length; i++) {
                        if (selectedLine != intersects[0].object) {
                            lineMesh[i].material.color.set(boardColor);
                        }
                    }
                    selectedLine = null;
                    
                    if(lineMesh.includes(intersects[0].object)) {
                        selectedLine = intersects[0].object;
                        selectedLine.material.color.set(0xFF0000);
                        removeTemporaryBall();
                        temporaryBall =
                            addTemporaryBall(
                                turn, 
                                selectedLine.gameXAxis, 
                                selectedLine.gameZAxis);

                        return true;
                    }
                }
            } else {
                if(selectedLine) {
                    selectedLine.material.color.set(boardColor);
                }
                selectedLine = null;
            }

            return false;
        }

        var addBall = (ballColor, x, y, z) => {
            var tst = 
                new THREE.Mesh(
                        new THREE.SphereGeometry(ballSize / 2, 10, 10), 
                        new THREE.MeshLambertMaterial({color: ballColor}));
                tst.position.x = boardSize / 2 - lineSpace / 2 - lineSpace * x;
                tst.position.y = baseYPosition + ballSize / 2 + boardHeight / 2 +  ballSize * y;
                tst.position.z = boardSize / 2 - lineSpace / 2 - lineSpace * z;
                scene.add(tst);
            return tst;
        };

        var addTemporaryBall = (ballColor, x, z) => {
            var tmp = 
                new THREE.Mesh(
                        new THREE.SphereGeometry(ballSize / 2, 10, 10), 
                        new THREE.MeshLambertMaterial({color: (turn == 1 ? ballWhiteColor : ballBlackColor)}));
            tmp.position.x = boardSize / 2 - lineSpace / 2 - lineSpace * x;
            tmp.position.y = baseYPosition + ballSize / 2 + boardHeight / 2 + linesHeight + 5;
            tmp.position.z = boardSize / 2 - lineSpace / 2 - lineSpace * z;
            scene.add(tmp);
            return tmp;
        };

        var init = () => {
            // scene
            scene = new THREE.Scene();
            
            // camera
            camera = 
                new THREE.PerspectiveCamera(
                    75, 
                    window.innerWidth / window.innerHeight,
                    1,
                    10000);
            camera.position.x = 50;
            camera.position.y = 50;
            camera.position.z = 75;
            
            // renderer
            renderer = new THREE.WebGLRenderer({antialias: true});
            renderer.setClearColor("#E5E5E5");
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);
            
            // controls
            controls = new THREE.OrbitControls( camera, renderer.domElement );
            
            // lights
            lightFront = new THREE.PointLight(0xFFFFFF, 1.5, 1000);
            lightFront.position.x = 30;
            lightFront.position.y = 60;
            lightFront.position.z = 150;
            scene.add(lightFront);
            
            lightBack = new THREE.PointLight(0xFFFFFF, 1.5, 1000);
            lightBack.position.x = -30;
            lightBack.position.y = -60;
            lightBack.position.z = -150;
            scene.add(lightBack);

            // -----
            // board
            // -----

            // bottom
            boardBase = 
                new THREE.Mesh(
                    new THREE.BoxGeometry( boardSize, boardHeight, boardSize ), 
                    new THREE.MeshLambertMaterial({color: boardColor}));
            boardBase.position.x = 0;
            boardBase.position.y = baseYPosition;
            boardBase.position.z = 0;
            scene.add(boardBase);

            // lines
            for(var i=0; i<4; i++) {
                for(var j=0; j<4; j++) {
                    var cylinder = 
                        new THREE.Mesh(
                            new THREE.CylinderGeometry(linesSize / 2, linesSize / 2, linesHeight, 5, 5), 
                            new THREE.MeshLambertMaterial({color: boardColor})
                        );
                    cylinder.position.x = boardSize / 2 - lineSpace / 2 - lineSpace * i;
                    cylinder.position.y = baseYPosition + linesHeight / 2 + boardHeight / 2;
                    cylinder.position.z = boardSize / 2 - lineSpace / 2 - lineSpace * j;
                    cylinder.gameXAxis = i;
                    cylinder.gameZAxis = j;
                    scene.add( cylinder );
                    lineMesh.push(cylinder);
                }
            }

            // raycaster
            mouse = new THREE.Vector2();
            raycaster = new THREE.Raycaster();

            // placed balls
            initializePlacedBalls();
        };

        var initializePlacedBalls = () => {

            placedBallsInLines = new Array();
            for(i=0; i<4; i++) {
                placedBallsInLinesSubArray = new Array();
                for(j=0; j<4; j++) {
                    placedBallsInLinesSubArray.push(0);
                }
                placedBallsInLines.push(placedBallsInLinesSubArray);
            }
            
            while(placedBalls.length > 0){ 
                scene.remove(placedBalls[0]);
                placedBalls[0].geometry.dispose();
                placedBalls[0].material.dispose();
                placedBalls[0] = undefined;
                placedBalls.splice(0, 1)
            }
        };

        var removeTemporaryBall = () => {
            if(temporaryBall) {
                scene.remove(temporaryBall);
                temporaryBall.geometry.dispose();
                temporaryBall.material.dispose();
                temporaryBall = undefined;
            }
        };

        var processRestart = (firstPlayer) => {

            initializePlacedBalls();

            removeTemporaryBall();

            for(var i=0; i<lineMesh.length; i++) {
                lineMesh[i].material.color.set(boardColor);
            }
            selectedLine = null;
            
            waitingForPlayer = true;

            $("#winner").css("display", "none");
 

            if(ishost) {
                startNewGame(
                    firstPlayer, 
                    () => {
                        joinGame(currentPlayer, () => {
                        socket.emit('gameRestart', currentPlayer);
                    });
                });
            } else {
                getGameDataOnJoinning(
                    () => {
                        joinGame(currentPlayer);
                });
            }
        };

        var onRestartClick = () => {

            processRestart((currentFirstPlayer == 1 ? 2 : 1));
        };

        var onRestartTopClick = () => {

            processRestart(currentFirstPlayer);
        };

        var startNewGame = (firstPlayer, cb) => {
            $.post(backendUrl + "/game/start", 
                { firstPlayer: firstPlayer }, 
                function( data ) {
                    if(cb) {
                        cb();
                    }
            })
            .fail(function() {
                alert("Error when calling backend");
            });
        };

        var getGameDataOnJoinning = (cb) => {
            $.get(backendUrl + "/game", function( data ) {

                var player1 = data.game.players.filter((p) => { return p.no == 1 });
                var player2 = data.game.players.filter((p) => { return p.no == 2 });
                setPlayerNames(player1, player2);

                window.setTimeout(
                    () => {
                        if(data.game.players.length == 2) {
                            //game is full
                            alert("game is full");
                            return;
                        }

                        if(cb) {
                            cb(data.game);
                        }

                    }, 10
                );
            })
            .fail(function() {
                alert("Error when calling backend");
            });
        }

        var joinGame = (player, cb) => {
            $.post(backendUrl + "/player/join", 
                player, 
                function( data ) {

                    // game variables
                    winner = data.game.winner;
                    turn = data.game.turn;
                    currentFirstPlayer = data.game.turn;

                    $("#turn-value").html(turn);

                    var player1 = data.game.players.filter((p) => { return p.no == 1 });
                    var player2 = data.game.players.filter((p) => { return p.no == 2 });

                    if(player1.length + player2.length == 2) {
                        waitingForPlayer = false;
                    }
                    
                    setPlayerNames(player1, player2);
                    if(cb) {
                        cb(player1, player2);
                    }
                    
                    socket.emit('playerJoin', currentPlayer);
                }
            )
            .fail(function() {
                alert("Error when calling backend");
            });
        }

        var setPlayerNames = (player1, player2) => {
            $("#player1").text("");
            $("#player1").css("color", "black");
            $("#player2").text("");
            $("#player2").css("color", "black");

            if(player1.length > 0) {
                $("#player1").text(player1[0].name);
                if(player1[0].name == playerName) {
                    $("#player1").css("color", "red");
                    currentPlayer = player1[0];
                }
            }
            if(player2.length > 0) {
                $("#player2").text(player2[0].name);
                if(player2[0].name == playerName) {
                    $("#player2").css("color", "red");
                    currentPlayer = player2[0];
                }
            }
        }

        var onlinePlayerMove = (message) => {
            blockMoves = true;
            temporaryBall = addTemporaryBall(message.player, message.x, message.z);
            placeBall(message);
        }

        var checkWinnerAndupdateTurn = (cb) => {
            
            $.get(backendUrl + "/game", function( data ) {
                // Check winner
                winner = data.game.winner;
                if(winner != 0) {
                    $("#winner #infos").html("The winner is : Player " + winner);
                    $("#winner").css("display", "block");
                    if(ishost) {
                        $("#winner button").css("display", "inline");
                    } else {
                        $("#winner button").css("display", "none");
                    }
                }

                // switch player
                turn = data.game.turn;
                $("#turn-value").html(turn);
                
                if(cb) {
                    cb();
                }
            })
            .fail(function() {
                alert("Error when calling backend");
            });
        };

        var placeBall = (move, cb) => {
            // Place ball
            tl = new TimelineMax();
            tl.to(
                temporaryBall.position, 
                1, 
                {
                    y: baseYPosition + ballSize / 2 + boardHeight / 2 + ballSize * move.y, 
                    ease: Expo.easeOut,
                    onComplete: () => {
                        // Set balls variables
                        placedBalls.push(temporaryBall);
                        placedBallsInLines[move.x][move.z] = move.y + 1;
                        
                        temporaryBall = undefined;

                        checkWinnerAndupdateTurn(() => {
                            if(cb) {
                                cb();
                            }
                            blockMoves = false;
                        });
                    }
                }
            );
        }

        var onlinePlayerJoin = (player) => {
            $("#player" + player.no).html(player.name);
            waitingForPlayer = false;
        }

        var onlinePlayerLeave = () => {
            if(waitingForPlayer) {
                return;
            }
            $("#player" + (currentPlayer.no == 1 ? 2 : 1)).html("");
            alert("A player has left, game restart");
            waitingForPlayer = true;
            processRestart(currentPlayer.no);
        }

        var onlineGameRestart = () => {
            if(!ishost) {
                processRestart();
            }
        }

        window.onload = () => {
            init();
            animate();

            // events
            window.addEventListener('resize', onWindowResize);
            controls.addEventListener('change', render);

            getGameDataOnJoinning((game) => {

                var error = true;
                while (error) {
                    playerName = prompt("What is your name ?");

                    error = false;
                    if (!playerName ? true : playerName.length <= 0)  {
                    } else {
                        if(game.players.filter((p) => { return p.name == playerName}).length > 0) {
                            alert("Player name already in use");
                            error = true;
                        }
                    }
                }

                if ((!playerName ? true : playerName.length <= 0) || error)  {
                    return;
                }

                var player = {
                    name: playerName
                }

                joinGame(player, (player1, player2) => {

                    if(player1[0].name == playerName) {
                        ishost = true;
                        $("#restart-top").css("display", "inline");
                    }
                    
                    // events
                    window.addEventListener('mousemove', onMouseMove);
                    document.body.addEventListener("touchstart", onTouch, false);
                    window.addEventListener('click', onMouseClick);
                    document.getElementById('restart').addEventListener('click', onRestartClick);
                    document.getElementById('restart-top').addEventListener('click', onRestartTopClick);

                    socket = io(backendUrl);

                    socket.on('playerMove', onlinePlayerMove);
                    socket.on('playerJoin', onlinePlayerJoin);
                    socket.on('playerLeave', onlinePlayerLeave);
                    socket.on('gameRestart', onlineGameRestart);

                });
            });

        }

    </script>
</body>
</html>